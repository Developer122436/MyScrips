1
00:00:00,002 --> 00:00:01,005
- [Instructor] When working with pandas,

2
00:00:01,005 --> 00:00:03,007
manipulating the data frame is key

3
00:00:03,007 --> 00:00:05,006
to getting what you want out of the data.

4
00:00:05,006 --> 00:00:07,007
In this video, I'll go over some basic

5
00:00:07,007 --> 00:00:09,004
selection and viewing functions,

6
00:00:09,004 --> 00:00:11,004
as well as saving our desired values

7
00:00:11,004 --> 00:00:12,007
to an Excel sheet.

8
00:00:12,007 --> 00:00:14,002
Now the first thing we want to do

9
00:00:14,002 --> 00:00:16,005
is have pandas and openpyxls set up.

10
00:00:16,005 --> 00:00:18,002
So I'll go over to our text document

11
00:00:18,002 --> 00:00:22,000
and import pandas as pd.

12
00:00:22,000 --> 00:00:24,000
I'll also import the workbook module

13
00:00:24,000 --> 00:00:25,007
from openpyxl.

14
00:00:25,007 --> 00:00:28,005
(keystroke noises)

15
00:00:28,005 --> 00:00:30,006
Once this is done, we need to have some data

16
00:00:30,006 --> 00:00:32,003
stored into our data frame.

17
00:00:32,003 --> 00:00:33,008
As a reminder, we are working with

18
00:00:33,008 --> 00:00:35,004
the CSV file called Names

19
00:00:35,004 --> 00:00:37,002
which I've already prepared the set-up for,

20
00:00:37,002 --> 00:00:38,009
so I'll just paste that here.

21
00:00:38,009 --> 00:00:40,008
Although we set up our own columns,

22
00:00:40,008 --> 00:00:42,006
imagine if you had to deal with a spreadsheet

23
00:00:42,006 --> 00:00:44,009
with so many columns that it was hard to fully

24
00:00:44,009 --> 00:00:46,006
read the data through your terminal.

25
00:00:46,006 --> 00:00:48,006
You need to know which columns contain what

26
00:00:48,006 --> 00:00:50,004
so that you can access the data you need

27
00:00:50,004 --> 00:00:51,004
to proceed.

28
00:00:51,004 --> 00:00:53,002
In order to do this all we need to do

29
00:00:53,002 --> 00:00:54,004
is use the same function

30
00:00:54,004 --> 00:00:57,009
we used to assign the columns.

31
00:00:57,009 --> 00:00:59,003
So let's print that here.

32
00:00:59,003 --> 00:01:05,002
(keystroke noises)

33
00:01:05,002 --> 00:01:07,005
And this will show us a breakdown and list format

34
00:01:07,005 --> 00:01:09,002
for the data we're dealing with.

35
00:01:09,002 --> 00:01:10,004
Now that we know how our data's

36
00:01:10,004 --> 00:01:11,006
split up by column,

37
00:01:11,006 --> 00:01:14,000
let's say you want to view just one column.

38
00:01:14,000 --> 00:01:16,000
Panda's is a multi-row and multi-column

39
00:01:16,000 --> 00:01:18,001
data structure, but it's functionality

40
00:01:18,001 --> 00:01:20,003
makes it easy for us to do this in one line

41
00:01:20,003 --> 00:01:22,009
with no iteration required.

42
00:01:22,009 --> 00:01:26,003
All we have to do is index by the column name.

43
00:01:26,003 --> 00:01:28,003
So let's say we want Last Name.

44
00:01:28,003 --> 00:01:30,008
Then we just take the Last Name index,

45
00:01:30,008 --> 00:01:35,005
and I'll clear this terminal for an easier view.

46
00:01:35,005 --> 00:01:37,008
As you can see, this prints out all the values

47
00:01:37,008 --> 00:01:40,004
in the Last Name column and their indices.

48
00:01:40,004 --> 00:01:42,004
If you wanted to access multiple column's data,

49
00:01:42,004 --> 00:01:45,008
we'd just pass it in as a list.

50
00:01:45,008 --> 00:01:52,002
So let's say we want the State and the Area Code.

51
00:01:52,002 --> 00:01:54,008
Then I'll clear my terminal

52
00:01:54,008 --> 00:01:57,002
and I'll run it again.

53
00:01:57,002 --> 00:01:59,000
Now you can see we have both the State

54
00:01:59,000 --> 00:02:01,007
and the Area Code and their appropriate indices.

55
00:02:01,007 --> 00:02:03,005
Now they only tricky thing to remember here

56
00:02:03,005 --> 00:02:04,009
is that we use double brackets

57
00:02:04,009 --> 00:02:06,006
because we're presenting the index

58
00:02:06,006 --> 00:02:09,001
of the data frame as a list of columns.

59
00:02:09,001 --> 00:02:11,005
Now if we had a large set of data,

60
00:02:11,005 --> 00:02:12,005
we could only want to view

61
00:02:12,005 --> 00:02:14,000
certain values in a column.

62
00:02:14,000 --> 00:02:17,002
We can achieve this by slicing.

63
00:02:17,002 --> 00:02:18,009
So let's say we want to take

64
00:02:18,009 --> 00:02:20,006
the First Name column

65
00:02:20,006 --> 00:02:24,009
and we only want the first three lines.

66
00:02:24,009 --> 00:02:28,005
Let me clear my terminal and run this again.

67
00:02:28,005 --> 00:02:29,009
As you can see this gives us

68
00:02:29,009 --> 00:02:31,001
the First Name column,

69
00:02:31,001 --> 00:02:32,009
but only the first three rows

70
00:02:32,009 --> 00:02:35,004
and it's indexed from zero to two.

71
00:02:35,004 --> 00:02:36,008
Now that we have some column viewing

72
00:02:36,008 --> 00:02:38,007
functions down, we can deal with some

73
00:02:38,007 --> 00:02:40,000
row functionality.

74
00:02:40,000 --> 00:02:41,008
Because rows are indexed with integers

75
00:02:41,008 --> 00:02:43,005
automatically by pandas,

76
00:02:43,005 --> 00:02:45,008
we use these indices to locate them

77
00:02:45,008 --> 00:02:48,007
specifically with the Integer Location function.

78
00:02:48,007 --> 00:02:50,008
So let's use that real quick.

79
00:02:50,008 --> 00:02:52,004
If we pass in the first index

80
00:02:52,004 --> 00:02:55,000
and print that to terminal

81
00:02:55,000 --> 00:02:57,007
then we should see that the row printed

82
00:02:57,007 --> 00:03:00,009
corresponds to the index given at the i location.

83
00:03:00,009 --> 00:03:02,008
The i location function is also

84
00:03:02,008 --> 00:03:04,007
a very useful tool when iterating

85
00:03:04,007 --> 00:03:06,009
though a data frame as you can increment

86
00:03:06,009 --> 00:03:08,004
the row repeatedly.

87
00:03:08,004 --> 00:03:10,001
Although pandas has some functionality

88
00:03:10,001 --> 00:03:12,002
for more efficient ways of gathering data

89
00:03:12,002 --> 00:03:13,007
rather than iteration,

90
00:03:13,007 --> 00:03:16,000
we can also use the i location function

91
00:03:16,000 --> 00:03:18,000
with two numbers or variables

92
00:03:18,000 --> 00:03:20,001
and they correspond to a row-column value

93
00:03:20,001 --> 00:03:21,006
or coordinate system.

94
00:03:21,006 --> 00:03:23,003
But first let's print out our data frame

95
00:03:23,003 --> 00:03:26,002
to see what we want.

96
00:03:26,002 --> 00:03:29,008
Now let's say you wanted to get the name Repici,

97
00:03:29,008 --> 00:03:31,000
the last name of John "Da Man" here.

98
00:03:31,000 --> 00:03:33,002
We recognize that indices are numbered

99
00:03:33,002 --> 00:03:35,008
starting at zero and our headers are strings.

100
00:03:35,008 --> 00:03:38,007
However, when using the i location function

101
00:03:38,007 --> 00:03:41,001
headers also correspond to integer values

102
00:03:41,001 --> 00:03:43,004
for their length starting at zero.

103
00:03:43,004 --> 00:03:46,002
So, if we wanted to return Repici

104
00:03:46,002 --> 00:03:49,000
we would use the indices two and one.

105
00:03:49,000 --> 00:03:52,001
So let's use our i location function here

106
00:03:52,001 --> 00:03:55,004
and index two and one.

107
00:03:55,004 --> 00:03:57,007
Now let's clear our terminal

108
00:03:57,007 --> 00:03:59,003
and run this.

109
00:03:59,003 --> 00:04:00,005
And there we have it.

110
00:04:00,005 --> 00:04:02,007
Now on a final note, we can combine any of

111
00:04:02,007 --> 00:04:05,008
these access and viewing functions for saving.

112
00:04:05,008 --> 00:04:08,000
So if you consistently wanted to grab

113
00:04:08,000 --> 00:04:09,006
certain rows or columns,

114
00:04:09,006 --> 00:04:12,006
or even a specific location of an Excel file,

115
00:04:12,006 --> 00:04:14,006
you can pick them out of your data frame,

116
00:04:14,006 --> 00:04:17,000
store them, and save them.

117
00:04:17,000 --> 00:04:18,006
So let's create a new variable

118
00:04:18,006 --> 00:04:25,001
called our wanted_values

119
00:04:25,001 --> 00:04:26,009
and let's say we wanted to take three columns

120
00:04:26,009 --> 00:04:28,004
from our data frame.

121
00:04:28,004 --> 00:04:35,007
Our First Name, Last Name and State.

122
00:04:35,007 --> 00:04:37,001
If these were the only values

123
00:04:37,001 --> 00:04:39,003
we wanted to extract from our data frame

124
00:04:39,003 --> 00:04:40,005
then we could just save them to

125
00:04:40,005 --> 00:04:42,002
an Excel document with our Save function.

126
00:04:42,002 --> 00:04:49,007
(keystroke noises)

127
00:04:49,007 --> 00:04:51,000
Now let's run this and check it out

128
00:04:51,000 --> 00:04:55,007
in our working directory.

129
00:04:55,007 --> 00:04:57,008
And now you can see we only get the First Name,

130
00:04:57,008 --> 00:04:59,001
the Last Name and the State,

131
00:04:59,001 --> 00:05:00,002
just like we wanted.

132
00:05:00,002 --> 00:05:01,001
And there you have it!

133
00:05:01,001 --> 00:05:03,005
Now you can manipulate and view any value

134
00:05:03,005 --> 00:05:05,005
within a data frame of any size.

